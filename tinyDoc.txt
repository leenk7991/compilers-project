Tiny is a very simple assembly code interpreter. 
The executable runs on Sun architectures.
---------------------------------------
An example Tiny program, which asks for a integer number and prints 5 asterisk
triangles with this length.

var length
str star "*"
str prompt "enter number: "
str eol "\n"

move 0 r2
sys writes prompt
sys readi length
move 1 r3
label outerloop
move r3 r0
label starloop
sys writes star
subi 1 r0
cmpi 0 r0
jne starloop
sys writes eol
addi 1 r3
cmpi length r3
jge outerloop
move 1 r3
addi 1 r2
cmpi 4 r2
jge outerloop
sys halt		 ; optional if at end
end

---------------------------------------

Tiny simulates an architecture that has any number of registers you need, and both integer an floating-point arithmetic. All data elements have size 1. The data representation is unknown to the user.

Tiny accepts the following assembly codes:

var id                          ; reserves and names a memory cell. first letter alphanum
                                  then alphanum with punctuations, case sensitive
                                ; both integer and real (float) have the size of one memory cell
str sid    "a string constant"  ; the only operation on string constants is sys writes sid
                                  strings can include \n for end-of-line

;  var and str declarations must preceed all code and labels (during debugging,
;  enforcement of this rule can be disabled. See the "mix" command line option)

label target           ; a jump target
move opmrl opmr        ; only one operand can be a memory id
addi opmrl reg         ; integer addition, reg = reg + op1
addr opmrl reg         ; real (i.e. floatingpoint) addition
subi opmrl reg         ; computes reg = reg - op1
subr opmrl reg
muli opmrl reg         ; computes reg = reg * op1
mulr opmrl reg
divi opmrl reg         ; computes reg = reg /  op1
divr opmrl reg
inci reg               ; increment the (integer) register value by 1
deci reg               ; decrement the (integer) register value by 1
cmpi opmrl reg         ; integer comparison; must preceed  a conditional jump;
                         it compares the first operand with the second op and
			 sets  the "processor status". (The status remains the
			 same until the next cmp instruction is executed.)
                         E.g, a subsequent jgt will jump if op1 > op2

cmpr opmrl reg         ; real comparison
jmp target             ; unconditional jump
jgt target             ; jump if (op1 of the preceeding cmp was) greater (than op2)
jlt target             ; jump if less than
jge target             ; jump if greater of equal
jle target             ; jump if less or equal
jeq target             ; jump if equal
jne target             ; jump if not equal
sys readi  opmr        ; system call for reading an integer from input
sys readr  opmr        ; system call for reading a real value 
sys writei opmr        ; system call for outputting an integer 
sys writer opmr        ; system call for outputting an integer
sys writes sid         ; system call for outputting a string constant
sys halt               ; system call to end the execution
end                    ; end of the assembly code (not an opcode)


notation used for the operands:
 id      stands for the name of a memory location
 sid     stands for the name of a string constant
 #       stands for an integer number
 target  stands for the name of a jump target
 reg     stands for a  register, named r0,r1,r2, or r3, case insensitive
 opmrl   stands for a memory id, register or a number (literal), 
         the format for real is digit*[.digit*][E[+|-]digit*]
 opmr    stands for a memory id, or a register
 
 ; semicolon leads in a comment (which is ignored by the interpreter). It can
   be at the beginning on a line or after an assembly code

data representation:

No assumption can be made about the representations. Real and integer cannot be
mixed.  Using an integer where a real is expected (and vice versa) leads to
undefined results.

-------------------------------
Compiling tiny

Linux: use any available c++ compiler to compile tinyNew.C
	example: g++ -o tiny tinyNew.C 

-------------------------------
Running tiny

Linux: ./tiny <name_of_tiny_source_code_file>

-------------------------------
